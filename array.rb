array = []

array = Array.new

array = Array.new()

array = Array.new(10)  #size of 10

# fist argument is always size of array , second one can be a value , methods , class 
# it accepts only two agruments

array = Array.new(10, "string") 

def sum
    100 + 300
end

array = Array.new(10, sum)  

# operartions  on arrays
# at : return value at that index
# size : return the length of array
    # comapct.size : return the size of array excluding null values or nil
# compact : remove all nil values
# push  : add element to the end of array
# pop   : remove last element from array and return it
# shift : remove first element from array and return it
# unshift : add element to the beginning of array
# delete : delete an element with specific value from array
    # delete_at : delete element by giving index
    # delete_if : delete element by checking condition
    # delete : delete all value by passing that value 
    #delete_unless : 
# <<   : same as push method
# slice: returns sub-part of array

# array methods

[:last,
 :to_h,
 :include?,
 :&,
 :*,
 :+,
 :-,
 :at,
 :fetch,
 :union,
 :difference,
 :intersection,
 :intersect?,
 :push,
 :append,
 :pop,
 :shift,
 :unshift,
 :each_index,
 :join,
 :rotate,
 :rotate!,
 :sort!,
 :sort_by!,
 :collect!,
 :map!,
 :select!,
 :filter!,
 :keep_if,
 :sort,
 :delete_at,
 :delete_if,
 :values_at,
 :count,
 :transpose,
 :find_index,
 :rassoc,
 :select,
 :filter,
 :flatten,
 :flatten!,
 :collect,
 :map,
 :reject,
 :fill,
 :assoc,
 :repeated_permutation,
 :uniq!,
 :compact!,
 :bsearch,
 :repeated_combination,
 :permutation,
 :combination,
 :reject!,
 :all?,
 :minmax,
 :one?,
 :bsearch_index,
 :any?,
 :product,
 :reverse_each,
 :shuffle,
 :deconstruct,
 :|,
 :first,
 :zip,
 :take,
 :take_while,
 :drop,
 :drop_while,
 :cycle,
 :<=>,
 :<<,
 :sum,
 :uniq,
 :compact,
 :==,
 :pretty_print,
 :none?,
 :[],
 :[]=,
 :sample,
 :pretty_print_cycle,
 :pack,
 :empty?,
 :eql?,
 :shuffle!,
 :insert,
 :index,
 :rindex,
 :replace,
 :clear,
 :max,
 :min,
 :hash,
 :inspect,
 :length,
 :size,
 :each,
 :reverse,
 :to_ary,
 :concat,
 :prepend,
 :reverse!,
 :to_a,
 :to_s,
 :delete,
 :slice,
 :slice!,
 :dig,
 :to_json,
 :chunk,
 :slice_before,
 :slice_after,
 :slice_when,
 :chunk_while,
 :to_set,
 :chain,
 :lazy,
 :find,
 :entries,
 :sort_by,
 :grep,
 :grep_v,
 :detect,
 :find_all,
 :filter_map,
 :flat_map,
 :collect_concat,
 :inject,
 :reduce,
 :partition,
 :group_by,
 :tally,
 :min_by,
 :max_by,
 :minmax_by,
 :member?,
 :each_with_index,
 :each_entry,
 :each_slice,
 :each_cons,
 :each_with_object,
 :to_yaml,
 :pretty_print_inspect,
 :pretty_print_instance_variables,
 :singleton_class,
 :dup,
 :itself,
 :methods,
 :singleton_methods,
 :protected_methods,
 :private_methods,
 :public_methods,
 :instance_variables,
 :instance_variable_get,
 :instance_variable_set,
 :instance_variable_defined?,
 :remove_instance_variable,
 :instance_of?,
 :kind_of?,
 :is_a?,
 :display,
 :public_send,
 :class,
 :tap,
 :frozen?,
 :extend,
 :yield_self,
 :then,
 :pretty_inspect,
 :clone,
 :===,
 :!~,
 :method,
 :public_method,
 :singleton_method,
 :nil?,
 :respond_to?,
 :define_singleton_method,
 :freeze,
 :object_id,
 :send,
 :Namespace,
 :TypeName,
 :to_enum,
 :enum_for,
 :equal?,
 :!,
 :__send__,
 :!=,
 :__id__,
 :instance_eval,
 :instance_exec]


